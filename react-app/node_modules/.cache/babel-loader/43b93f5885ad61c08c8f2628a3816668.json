{"ast":null,"code":"var _jsxFileName = \"D:\\\\cdrlu\\\\Documents\\\\twitch_chatbot\\\\lubebot_site\\\\react-app\\\\src\\\\pages\\\\Home.js\";\nimport React, { Component } from \"react\";\nimport \"./home.css\";\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counts: [],\n      users: [],\n      encounters: []\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"/api/getCounts\").then(data => data.json()).then(res => this.setState({\n        counts: res.data\n      }));\n      fetch(\"/api/getUsers\").then(data => data.json()).then(res => this.setState({\n        users: res.data\n      }));\n      fetch(\"/api/getEncounters\").then(data => data.json()).then(res => this.setState({\n        encounters: res.data\n      }));\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {}\n\n  render() {\n    const _this$state = this.state,\n          counts = _this$state.counts,\n          users = _this$state.users,\n          encounters = _this$state.encounters;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Counts:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, counts.map(r => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, r.name, \": \", r.total);\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Users:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, users.map(r => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, r.name, \": \", r.chats);\n    })), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Encounters:\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, encounters.map(r => {\n      console.log(r.name);\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, r.player.name, \": \", r.monster.name);\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["D:\\cdrlu\\Documents\\twitch_chatbot\\lubebot_site\\react-app\\src\\pages\\Home.js"],"names":["React","Component","Home","state","counts","users","encounters","getDataFromDb","fetch","then","data","json","res","setState","componentDidMount","componentWillUnmount","render","map","r","name","total","chats","console","log","player","monster"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAE3BE,KAF2B,GAEnB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,KAAK,EAAE,EAFD;AAGNC,MAAAA,UAAU,EAAE;AAHN,KAFmB;;AAAA,SAmB3BC,aAnB2B,GAmBX,MAAM;AACpBC,MAAAA,KAAK,CAAC,gBAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAET,QAAAA,MAAM,EAAEQ,GAAG,CAACF;AAAd,OAAd,CAFf;AAIAF,MAAAA,KAAK,CAAC,eAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAER,QAAAA,KAAK,EAAEO,GAAG,CAACF;AAAb,OAAd,CAFf;AAIAF,MAAAA,KAAK,CAAC,oBAAD,CAAL,CACGC,IADH,CACQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADhB,EAEGF,IAFH,CAEQG,GAAG,IAAI,KAAKC,QAAL,CAAc;AAAEP,QAAAA,UAAU,EAAEM,GAAG,CAACF;AAAlB,OAAd,CAFf;AAGD,KA/B0B;AAAA;;AAQ3B;AACA;AACA;AACAI,EAAAA,iBAAiB,GAAG;AAClB,SAAKP,aAAL;AACD,GAb0B,CAe3B;AACA;;;AACAQ,EAAAA,oBAAoB,GAAG,CAAE;;AAgBzBC,EAAAA,MAAM,GAAG;AAAA,wBAC+B,KAAKb,KADpC;AAAA,UACCC,MADD,eACCA,MADD;AAAA,UACSC,KADT,eACSA,KADT;AAAA,UACgBC,UADhB,eACgBA,UADhB;AAEP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,MAAM,CAACa,GAAP,CAAWC,CAAC,IAAI;AACf,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,CAAC,CAACC,IADL,QACaD,CAAC,CAACE,KADf,CADF;AAKD,KANA,CADH,CAFF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGf,KAAK,CAACY,GAAN,CAAUC,CAAC,IAAI;AACd,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,CAAC,CAACC,IADL,QACaD,CAAC,CAACG,KADf,CADF;AAKD,KANA,CADH,CAbF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAtBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGf,UAAU,CAACW,GAAX,CAAeC,CAAC,IAAI;AACnBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAC,CAACC,IAAd;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,CAAC,CAACM,MAAF,CAASL,IADZ,QACoBD,CAAC,CAACO,OAAF,CAAUN,IAD9B,CADF;AAKD,KAPA,CADH,CAvBF,CADF;AAoCD;;AAvE0B;;AA0E7B,eAAejB,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./home.css\";\r\n\r\nclass Home extends Component {\r\n  // initialize our state\r\n  state = {\r\n    counts: [],\r\n    users: [],\r\n    encounters: []\r\n  };\r\n\r\n  // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has\r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    this.getDataFromDb();\r\n  }\r\n\r\n  // never let a process live forever\r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {}\r\n\r\n  getDataFromDb = () => {\r\n    fetch(\"/api/getCounts\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ counts: res.data }));\r\n\r\n    fetch(\"/api/getUsers\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ users: res.data }));\r\n\r\n    fetch(\"/api/getEncounters\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ encounters: res.data }));\r\n  };\r\n\r\n  render() {\r\n    const { counts, users, encounters } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Counts:</h1>\r\n        <ul>\r\n          {counts.map(r => {\r\n            return (\r\n              <li>\r\n                {r.name}: {r.total}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n\r\n        <h1>Users:</h1>\r\n        <ul>\r\n          {users.map(r => {\r\n            return (\r\n              <li>\r\n                {r.name}: {r.chats}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <h1>Encounters:</h1>\r\n        <ul>\r\n          {encounters.map(r => {\r\n            console.log(r.name);\r\n            return (\r\n              <li>\r\n                {r.player.name}: {r.monster.name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}